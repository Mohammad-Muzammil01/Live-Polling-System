{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n  }\n  connect(userId, role, name) {\n    if (this.socket && this.isConnected) {\n      return this.socket;\n    }\n\n    // Connect to your backend server\n    this.socket = io('http://localhost:5000', {\n      transports: ['websocket', 'polling'],\n      autoConnect: true\n    });\n    this.socket.on('connect', () => {\n      console.log('Connected to server');\n      this.isConnected = true;\n\n      // Authenticate the user with the server\n      console.log('Authenticating with:', {\n        userId,\n        role,\n        name\n      });\n      this.socket.emit('authenticate', {\n        userId,\n        role,\n        name\n      });\n    });\n    this.socket.on('authenticated', data => {\n      console.log('Authentication successful:', data);\n      this.isConnected = true;\n\n      // Emit a custom event to notify that authentication is complete\n      this.socket.emit('auth_complete');\n    });\n    this.socket.on('auth_error', error => {\n      console.error('Authentication failed:', error);\n    });\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from server');\n      this.isConnected = false;\n    });\n    this.socket.on('connect_error', error => {\n      console.error('Connection error:', error);\n      this.isConnected = false;\n    });\n    return this.socket;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n\n  // Poll-related events\n  onPollCreated(callback) {\n    if (this.socket) {\n      console.log('Setting up poll_created listener');\n      this.socket.on('poll_created', data => {\n        console.log('Received poll_created event:', data);\n        callback(data);\n      });\n    } else {\n      console.error('Socket not connected when trying to set up poll_created listener');\n    }\n  }\n\n  // Receive currently active poll when (re)connecting\n  onPollActive(callback) {\n    if (this.socket) {\n      this.socket.on('poll_active', callback);\n    }\n  }\n  onPollEnded(callback) {\n    if (this.socket) {\n      this.socket.on('poll_ended', callback);\n    }\n  }\n  onAnswerSubmitted(callback) {\n    if (this.socket) {\n      // Backend emits 'poll_results_updated' for answers; support both for safety\n      this.socket.on('poll_results_updated', callback);\n      this.socket.on('answer_submitted', callback);\n    }\n  }\n\n  // Chat-related events\n  onMessageReceived(callback) {\n    if (this.socket) {\n      // Backend emits 'new_message' and 'private_message'\n      this.socket.on('new_message', callback);\n      this.socket.on('private_message', callback);\n    }\n  }\n\n  // Echo for sender so UI only adds once\n  onMessageSent(callback) {\n    if (this.socket) {\n      this.socket.on('message_sent', callback);\n    }\n  }\n  onUserTyping(callback) {\n    if (this.socket) {\n      this.socket.on('user_typing', callback);\n    }\n  }\n  onUserStoppedTyping(callback) {\n    if (this.socket) {\n      this.socket.on('user_stopped_typing', callback);\n    }\n  }\n\n  // User status events\n  onUserJoined(callback) {\n    if (this.socket) {\n      this.socket.on('user_joined', callback);\n    }\n  }\n  onUserLeft(callback) {\n    if (this.socket) {\n      this.socket.on('user_left', callback);\n    }\n  }\n\n  // Participants list updates\n  onParticipantsUpdate(callback) {\n    if (this.socket) {\n      this.socket.on('participants_update', callback);\n    }\n  }\n\n  // Kick related\n  onUserKicked(callback) {\n    if (this.socket) {\n      this.socket.on('user_kicked', callback);\n    }\n  }\n  kickUser(userId) {\n    if (this.socket) {\n      this.socket.emit('kick_user', {\n        userId\n      });\n    }\n  }\n\n  // Emit events\n  createPoll(pollData) {\n    if (this.socket) {\n      console.log('Emitting create_poll event:', pollData);\n      this.socket.emit('create_poll', pollData);\n    } else {\n      console.error('Socket not connected when trying to create poll');\n    }\n  }\n  submitAnswer(answerData) {\n    if (this.socket) {\n      const {\n        pollId,\n        questionId,\n        answer\n      } = answerData || {};\n      // Backend expects { pollId, answer }\n      const payload = {\n        pollId: pollId || questionId,\n        answer\n      };\n      this.socket.emit('submit_answer', payload);\n    }\n  }\n  endPoll(pollId) {\n    if (this.socket) {\n      // Backend expects the pollId directly, not an object\n      this.socket.emit('end_poll', pollId);\n    }\n  }\n  sendMessage(messageData) {\n    if (this.socket) {\n      this.socket.emit('send_message', messageData);\n    }\n  }\n  startTyping() {\n    if (this.socket) {\n      this.socket.emit('typing_start');\n    }\n  }\n  stopTyping() {\n    if (this.socket) {\n      this.socket.emit('typing_stop');\n    }\n  }\n\n  // Remove event listeners\n  off(event) {\n    if (this.socket) {\n      this.socket.off(event);\n    }\n  }\n\n  // Get connection status\n  getConnectionStatus() {\n    return this.isConnected;\n  }\n\n  // Wait for authentication to complete\n  waitForAuth(callback) {\n    if (this.socket) {\n      this.socket.on('auth_complete', callback);\n    }\n  }\n\n  // Update user name (useful for students who enter their name after connecting)\n  updateUserName(newName) {\n    if (this.socket) {\n      console.log('Updating user name to:', newName);\n      this.socket.emit('update_user_name', {\n        name: newName\n      });\n    }\n  }\n}\n\n// Export a singleton instance\nexport default new SocketService();","map":{"version":3,"names":["io","SocketService","constructor","socket","isConnected","connect","userId","role","name","transports","autoConnect","on","console","log","emit","data","error","disconnect","onPollCreated","callback","onPollActive","onPollEnded","onAnswerSubmitted","onMessageReceived","onMessageSent","onUserTyping","onUserStoppedTyping","onUserJoined","onUserLeft","onParticipantsUpdate","onUserKicked","kickUser","createPoll","pollData","submitAnswer","answerData","pollId","questionId","answer","payload","endPoll","sendMessage","messageData","startTyping","stopTyping","off","event","getConnectionStatus","waitForAuth","updateUserName","newName"],"sources":["C:/Users/rizwa/Desktop/Live Polling System/frontend/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.isConnected = false;\r\n  }\r\n\r\n  connect(userId, role, name) {\r\n    if (this.socket && this.isConnected) {\r\n      return this.socket;\r\n    }\r\n\r\n    // Connect to your backend server\r\n    this.socket = io('http://localhost:5000', {\r\n      transports: ['websocket', 'polling'],\r\n      autoConnect: true,\r\n    });\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('Connected to server');\r\n      this.isConnected = true;\r\n      \r\n      // Authenticate the user with the server\r\n      console.log('Authenticating with:', { userId, role, name });\r\n      this.socket.emit('authenticate', { userId, role, name });\r\n    });\r\n\r\n    this.socket.on('authenticated', (data) => {\r\n      console.log('Authentication successful:', data);\r\n      this.isConnected = true;\r\n      \r\n      // Emit a custom event to notify that authentication is complete\r\n      this.socket.emit('auth_complete');\r\n    });\r\n\r\n    this.socket.on('auth_error', (error) => {\r\n      console.error('Authentication failed:', error);\r\n    });\r\n\r\n    this.socket.on('disconnect', () => {\r\n      console.log('Disconnected from server');\r\n      this.isConnected = false;\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('Connection error:', error);\r\n      this.isConnected = false;\r\n    });\r\n\r\n    return this.socket;\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.isConnected = false;\r\n    }\r\n  }\r\n\r\n  // Poll-related events\r\n  onPollCreated(callback) {\r\n    if (this.socket) {\r\n      console.log('Setting up poll_created listener');\r\n      this.socket.on('poll_created', (data) => {\r\n        console.log('Received poll_created event:', data);\r\n        callback(data);\r\n      });\r\n    } else {\r\n      console.error('Socket not connected when trying to set up poll_created listener');\r\n    }\r\n  }\r\n\r\n  // Receive currently active poll when (re)connecting\r\n  onPollActive(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('poll_active', callback);\r\n    }\r\n  }\r\n  onPollEnded(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('poll_ended', callback);\r\n    }\r\n  }\r\n\r\n  onAnswerSubmitted(callback) {\r\n    if (this.socket) {\r\n      // Backend emits 'poll_results_updated' for answers; support both for safety\r\n      this.socket.on('poll_results_updated', callback);\r\n      this.socket.on('answer_submitted', callback);\r\n    }\r\n  }\r\n\r\n  // Chat-related events\r\n  onMessageReceived(callback) {\r\n    if (this.socket) {\r\n      // Backend emits 'new_message' and 'private_message'\r\n      this.socket.on('new_message', callback);\r\n      this.socket.on('private_message', callback);\r\n    }\r\n  }\r\n\r\n  // Echo for sender so UI only adds once\r\n  onMessageSent(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('message_sent', callback);\r\n    }\r\n  }\r\n\r\n  onUserTyping(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('user_typing', callback);\r\n    }\r\n  }\r\n\r\n  onUserStoppedTyping(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('user_stopped_typing', callback);\r\n    }\r\n  }\r\n\r\n  // User status events\r\n  onUserJoined(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('user_joined', callback);\r\n    }\r\n  }\r\n\r\n  onUserLeft(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('user_left', callback);\r\n    }\r\n  }\r\n\r\n  // Participants list updates\r\n  onParticipantsUpdate(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('participants_update', callback);\r\n    }\r\n  }\r\n\r\n  // Kick related\r\n  onUserKicked(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('user_kicked', callback);\r\n    }\r\n  }\r\n\r\n  kickUser(userId) {\r\n    if (this.socket) {\r\n      this.socket.emit('kick_user', { userId });\r\n    }\r\n  }\r\n\r\n  // Emit events\r\n  createPoll(pollData) {\r\n    if (this.socket) {\r\n      console.log('Emitting create_poll event:', pollData);\r\n      this.socket.emit('create_poll', pollData);\r\n    } else {\r\n      console.error('Socket not connected when trying to create poll');\r\n    }\r\n  }\r\n\r\n  submitAnswer(answerData) {\r\n    if (this.socket) {\r\n      const { pollId, questionId, answer } = answerData || {};\r\n      // Backend expects { pollId, answer }\r\n      const payload = { pollId: pollId || questionId, answer };\r\n      this.socket.emit('submit_answer', payload);\r\n    }\r\n  }\r\n\r\n  endPoll(pollId) {\r\n    if (this.socket) {\r\n      // Backend expects the pollId directly, not an object\r\n      this.socket.emit('end_poll', pollId);\r\n    }\r\n  }\r\n\r\n  sendMessage(messageData) {\r\n    if (this.socket) {\r\n      this.socket.emit('send_message', messageData);\r\n    }\r\n  }\r\n\r\n  startTyping() {\r\n    if (this.socket) {\r\n      this.socket.emit('typing_start');\r\n    }\r\n  }\r\n\r\n  stopTyping() {\r\n    if (this.socket) {\r\n      this.socket.emit('typing_stop');\r\n    }\r\n  }\r\n\r\n  // Remove event listeners\r\n  off(event) {\r\n    if (this.socket) {\r\n      this.socket.off(event);\r\n    }\r\n  }\r\n\r\n  // Get connection status\r\n  getConnectionStatus() {\r\n    return this.isConnected;\r\n  }\r\n\r\n  // Wait for authentication to complete\r\n  waitForAuth(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('auth_complete', callback);\r\n    }\r\n  }\r\n\r\n  // Update user name (useful for students who enter their name after connecting)\r\n  updateUserName(newName) {\r\n    if (this.socket) {\r\n      console.log('Updating user name to:', newName);\r\n      this.socket.emit('update_user_name', { name: newName });\r\n    }\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport default new SocketService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\nconst initialState = {\n  currentQuestion: null,\n  pollHistory: [],\n  isActive: false,\n  timeRemaining: 60,\n  participants: [],\n  loading: false,\n  error: null\n};\nexport const createPoll = createAsyncThunk('poll/createPoll', async pollData => {\n  // Simulate API call\n  await new Promise(resolve => setTimeout(resolve, 100));\n  return {\n    id: uuidv4(),\n    ...pollData,\n    createdAt: new Date().toISOString(),\n    results: {},\n    answeredBy: []\n  };\n});\nexport const submitAnswer = createAsyncThunk('poll/submitAnswer', async ({\n  questionId,\n  answer,\n  participantId\n}) => {\n  // Simulate API call\n  await new Promise(resolve => setTimeout(resolve, 100));\n  return {\n    questionId,\n    answer,\n    participantId\n  };\n});\nconst pollSlice = createSlice({\n  name: 'poll',\n  initialState,\n  reducers: {\n    setCurrentQuestion: (state, action) => {\n      state.currentQuestion = action.payload;\n      state.isActive = true;\n      state.timeRemaining = action.payload.timeLimit || 60;\n      state.participants = action.payload.participants || [];\n    },\n    updateTimeRemaining: (state, action) => {\n      state.timeRemaining = action.payload;\n      if (state.timeRemaining <= 0) {\n        state.isActive = false;\n      }\n    },\n    addParticipant: (state, action) => {\n      if (!state.participants.find(p => p.id === action.payload.id)) {\n        state.participants.push(action.payload);\n      }\n    },\n    removeParticipant: (state, action) => {\n      state.participants = state.participants.filter(p => p.id !== action.payload);\n    },\n    updateResults: (state, action) => {\n      if (state.currentQuestion) {\n        state.currentQuestion.results = action.payload;\n      }\n    },\n    endPoll: state => {\n      if (state.currentQuestion) {\n        state.pollHistory.push({\n          ...state.currentQuestion,\n          endedAt: new Date().toISOString()\n        });\n      }\n      state.currentQuestion = null;\n      state.isActive = false;\n      state.timeRemaining = 60;\n    },\n    resetPoll: state => {\n      state.currentQuestion = null;\n      state.isActive = false;\n      state.timeRemaining = 60;\n      state.results = {};\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(createPoll.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(createPoll.fulfilled, (state, action) => {\n      state.loading = false;\n      state.currentQuestion = action.payload;\n      state.isActive = true;\n      state.timeRemaining = action.payload.timeLimit || 60;\n    }).addCase(createPoll.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    }).addCase(submitAnswer.fulfilled, (state, action) => {\n      const {\n        questionId,\n        answer,\n        participantId\n      } = action.payload;\n      if (state.currentQuestion && state.currentQuestion.id === questionId) {\n        if (!state.currentQuestion.results[answer]) {\n          state.currentQuestion.results[answer] = 0;\n        }\n        state.currentQuestion.results[answer]++;\n        if (!state.currentQuestion.answeredBy.includes(participantId)) {\n          state.currentQuestion.answeredBy.push(participantId);\n        }\n      }\n    });\n  }\n});\nexport const {\n  setCurrentQuestion,\n  updateTimeRemaining,\n  addParticipant,\n  removeParticipant,\n  updateResults,\n  endPoll,\n  resetPoll\n} = pollSlice.actions;\nexport default pollSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","v4","uuidv4","initialState","currentQuestion","pollHistory","isActive","timeRemaining","participants","loading","error","createPoll","pollData","Promise","resolve","setTimeout","id","createdAt","Date","toISOString","results","answeredBy","submitAnswer","questionId","answer","participantId","pollSlice","name","reducers","setCurrentQuestion","state","action","payload","timeLimit","updateTimeRemaining","addParticipant","find","p","push","removeParticipant","filter","updateResults","endPoll","endedAt","resetPoll","extraReducers","builder","addCase","pending","fulfilled","rejected","message","includes","actions","reducer"],"sources":["C:/Users/rizwa/Desktop/Live Polling System/frontend/src/store/pollSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst initialState = {\r\n  currentQuestion: null,\r\n  pollHistory: [],\r\n  isActive: false,\r\n  timeRemaining: 60,\r\n  participants: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const createPoll = createAsyncThunk(\r\n  'poll/createPoll',\r\n  async (pollData) => {\r\n    // Simulate API call\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    return {\r\n      id: uuidv4(),\r\n      ...pollData,\r\n      createdAt: new Date().toISOString(),\r\n      results: {},\r\n      answeredBy: [],\r\n    };\r\n  }\r\n);\r\n\r\nexport const submitAnswer = createAsyncThunk(\r\n  'poll/submitAnswer',\r\n  async ({ questionId, answer, participantId }) => {\r\n    // Simulate API call\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    return { questionId, answer, participantId };\r\n  }\r\n);\r\n\r\nconst pollSlice = createSlice({\r\n  name: 'poll',\r\n  initialState,\r\n  reducers: {\r\n    setCurrentQuestion: (state, action) => {\r\n      state.currentQuestion = action.payload;\r\n      state.isActive = true;\r\n      state.timeRemaining = action.payload.timeLimit || 60;\r\n      state.participants = action.payload.participants || [];\r\n    },\r\n    updateTimeRemaining: (state, action) => {\r\n      state.timeRemaining = action.payload;\r\n      if (state.timeRemaining <= 0) {\r\n        state.isActive = false;\r\n      }\r\n    },\r\n    addParticipant: (state, action) => {\r\n      if (!state.participants.find(p => p.id === action.payload.id)) {\r\n        state.participants.push(action.payload);\r\n      }\r\n    },\r\n    removeParticipant: (state, action) => {\r\n      state.participants = state.participants.filter(\r\n        p => p.id !== action.payload\r\n      );\r\n    },\r\n    updateResults: (state, action) => {\r\n      if (state.currentQuestion) {\r\n        state.currentQuestion.results = action.payload;\r\n      }\r\n    },\r\n    endPoll: (state) => {\r\n      if (state.currentQuestion) {\r\n        state.pollHistory.push({\r\n          ...state.currentQuestion,\r\n          endedAt: new Date().toISOString(),\r\n        });\r\n      }\r\n      state.currentQuestion = null;\r\n      state.isActive = false;\r\n      state.timeRemaining = 60;\r\n    },\r\n    resetPoll: (state) => {\r\n      state.currentQuestion = null;\r\n      state.isActive = false;\r\n      state.timeRemaining = 60;\r\n      state.results = {};\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(createPoll.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(createPoll.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.currentQuestion = action.payload;\r\n        state.isActive = true;\r\n        state.timeRemaining = action.payload.timeLimit || 60;\r\n      })\r\n      .addCase(createPoll.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(submitAnswer.fulfilled, (state, action) => {\r\n        const { questionId, answer, participantId } = action.payload;\r\n        if (state.currentQuestion && state.currentQuestion.id === questionId) {\r\n          if (!state.currentQuestion.results[answer]) {\r\n            state.currentQuestion.results[answer] = 0;\r\n          }\r\n          state.currentQuestion.results[answer]++;\r\n          \r\n          if (!state.currentQuestion.answeredBy.includes(participantId)) {\r\n            state.currentQuestion.answeredBy.push(participantId);\r\n          }\r\n        }\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  setCurrentQuestion,\r\n  updateTimeRemaining,\r\n  addParticipant,\r\n  removeParticipant,\r\n  updateResults,\r\n  endPoll,\r\n  resetPoll,\r\n} = pollSlice.actions;\r\n\r\nexport default pollSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
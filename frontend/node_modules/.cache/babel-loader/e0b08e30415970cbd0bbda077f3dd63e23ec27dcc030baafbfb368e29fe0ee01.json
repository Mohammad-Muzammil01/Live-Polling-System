{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n  }\n  connect(userId, role, name) {\n    if (this.socket && this.isConnected) {\n      return this.socket;\n    }\n\n    // Connect to your backend server\n    this.socket = io('http://localhost:5000', {\n      transports: ['websocket', 'polling'],\n      autoConnect: true\n    });\n    this.socket.on('connect', () => {\n      console.log('Connected to server');\n      this.isConnected = true;\n\n      // Authenticate the user with the server\n      this.socket.emit('authenticate', {\n        userId,\n        role,\n        name\n      });\n    });\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from server');\n      this.isConnected = false;\n    });\n    this.socket.on('connect_error', error => {\n      console.error('Connection error:', error);\n      this.isConnected = false;\n    });\n    return this.socket;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n\n  // Poll-related events\n  onPollCreated(callback) {\n    if (this.socket) {\n      console.log('Setting up poll_created listener');\n      this.socket.on('poll_created', callback);\n    } else {\n      console.error('Socket not connected when trying to set up poll_created listener');\n    }\n  }\n  onPollEnded(callback) {\n    if (this.socket) {\n      this.socket.on('poll_ended', callback);\n    }\n  }\n  onAnswerSubmitted(callback) {\n    if (this.socket) {\n      this.socket.on('answer_submitted', callback);\n    }\n  }\n\n  // Chat-related events\n  onMessageReceived(callback) {\n    if (this.socket) {\n      this.socket.on('message_received', callback);\n    }\n  }\n  onUserTyping(callback) {\n    if (this.socket) {\n      this.socket.on('user_typing', callback);\n    }\n  }\n  onUserStoppedTyping(callback) {\n    if (this.socket) {\n      this.socket.on('user_stopped_typing', callback);\n    }\n  }\n\n  // User status events\n  onUserJoined(callback) {\n    if (this.socket) {\n      this.socket.on('user_joined', callback);\n    }\n  }\n  onUserLeft(callback) {\n    if (this.socket) {\n      this.socket.on('user_left', callback);\n    }\n  }\n\n  // Emit events\n  createPoll(pollData) {\n    if (this.socket) {\n      this.socket.emit('create_poll', pollData);\n    }\n  }\n  submitAnswer(answerData) {\n    if (this.socket) {\n      this.socket.emit('submit_answer', answerData);\n    }\n  }\n  endPoll(pollId) {\n    if (this.socket) {\n      this.socket.emit('end_poll', {\n        pollId\n      });\n    }\n  }\n  sendMessage(messageData) {\n    if (this.socket) {\n      this.socket.emit('send_message', messageData);\n    }\n  }\n  startTyping() {\n    if (this.socket) {\n      this.socket.emit('typing_start');\n    }\n  }\n  stopTyping() {\n    if (this.socket) {\n      this.socket.emit('typing_stop');\n    }\n  }\n\n  // Remove event listeners\n  off(event) {\n    if (this.socket) {\n      this.socket.off(event);\n    }\n  }\n\n  // Get connection status\n  getConnectionStatus() {\n    return this.isConnected;\n  }\n}\n\n// Export a singleton instance\nexport default new SocketService();","map":{"version":3,"names":["io","SocketService","constructor","socket","isConnected","connect","userId","role","name","transports","autoConnect","on","console","log","emit","error","disconnect","onPollCreated","callback","onPollEnded","onAnswerSubmitted","onMessageReceived","onUserTyping","onUserStoppedTyping","onUserJoined","onUserLeft","createPoll","pollData","submitAnswer","answerData","endPoll","pollId","sendMessage","messageData","startTyping","stopTyping","off","event","getConnectionStatus"],"sources":["C:/Users/rizwa/Desktop/Live Polling System/frontend/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.isConnected = false;\r\n  }\r\n\r\n  connect(userId, role, name) {\r\n    if (this.socket && this.isConnected) {\r\n      return this.socket;\r\n    }\r\n\r\n    // Connect to your backend server\r\n    this.socket = io('http://localhost:5000', {\r\n      transports: ['websocket', 'polling'],\r\n      autoConnect: true,\r\n    });\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('Connected to server');\r\n      this.isConnected = true;\r\n      \r\n      // Authenticate the user with the server\r\n      this.socket.emit('authenticate', { userId, role, name });\r\n    });\r\n\r\n    this.socket.on('disconnect', () => {\r\n      console.log('Disconnected from server');\r\n      this.isConnected = false;\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('Connection error:', error);\r\n      this.isConnected = false;\r\n    });\r\n\r\n    return this.socket;\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.isConnected = false;\r\n    }\r\n  }\r\n\r\n  // Poll-related events\r\n  onPollCreated(callback) {\r\n    if (this.socket) {\r\n      console.log('Setting up poll_created listener');\r\n      this.socket.on('poll_created', callback);\r\n    } else {\r\n      console.error('Socket not connected when trying to set up poll_created listener');\r\n    }\r\n  }\r\n\r\n  onPollEnded(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('poll_ended', callback);\r\n    }\r\n  }\r\n\r\n  onAnswerSubmitted(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('answer_submitted', callback);\r\n    }\r\n  }\r\n\r\n  // Chat-related events\r\n  onMessageReceived(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('message_received', callback);\r\n    }\r\n  }\r\n\r\n  onUserTyping(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('user_typing', callback);\r\n    }\r\n  }\r\n\r\n  onUserStoppedTyping(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('user_stopped_typing', callback);\r\n    }\r\n  }\r\n\r\n  // User status events\r\n  onUserJoined(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('user_joined', callback);\r\n    }\r\n  }\r\n\r\n  onUserLeft(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('user_left', callback);\r\n    }\r\n  }\r\n\r\n  // Emit events\r\n  createPoll(pollData) {\r\n    if (this.socket) {\r\n      this.socket.emit('create_poll', pollData);\r\n    }\r\n  }\r\n\r\n  submitAnswer(answerData) {\r\n    if (this.socket) {\r\n      this.socket.emit('submit_answer', answerData);\r\n    }\r\n  }\r\n\r\n  endPoll(pollId) {\r\n    if (this.socket) {\r\n      this.socket.emit('end_poll', { pollId });\r\n    }\r\n  }\r\n\r\n  sendMessage(messageData) {\r\n    if (this.socket) {\r\n      this.socket.emit('send_message', messageData);\r\n    }\r\n  }\r\n\r\n  startTyping() {\r\n    if (this.socket) {\r\n      this.socket.emit('typing_start');\r\n    }\r\n  }\r\n\r\n  stopTyping() {\r\n    if (this.socket) {\r\n      this.socket.emit('typing_stop');\r\n    }\r\n  }\r\n\r\n  // Remove event listeners\r\n  off(event) {\r\n    if (this.socket) {\r\n      this.socket.off(event);\r\n    }\r\n  }\r\n\r\n  // Get connection status\r\n  getConnectionStatus() {\r\n    return this.isConnected;\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport default new SocketService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}